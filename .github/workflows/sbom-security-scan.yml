name: SBOM and Security Scanning

on:
  workflow_call:
    inputs:
      image-tags:
        required: true
        type: string
        description: 'Docker image tags to scan'
      image-digest:
        required: true
        type: string
        description: 'Docker image digest'
      registry:
        required: true
        type: string
        description: 'Container registry URL'
      image-name:
        required: true
        type: string
        description: 'Full image name'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write  # For attestation
      attestations: write  # For SBOM attestation

    steps:
      # Log in to registry to pull images for scanning
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate SBOM for the container image
      - name: Install security tools
        run: |
          # Install Syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

          # Install Grype for vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

          # Install Trivy as additional scanner
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Generate container SBOM
        run: |
          # Get the first tag from the list for SBOM generation
          FIRST_TAG=$(echo "${{ inputs.image-tags }}" | head -n1)
          echo "Generating SBOM for image: ${FIRST_TAG}"

          # Generate SBOM in multiple formats
          syft "${FIRST_TAG}" -o spdx-json > sbom-spdx.json
          syft "${FIRST_TAG}" -o cyclonedx-json > sbom-cyclonedx.json
          syft "${FIRST_TAG}" -o syft-json > sbom-syft.json

          # Human-readable format
          syft "${FIRST_TAG}" -o table > sbom-table.txt

          echo "SBOM generated successfully"
          echo "Total packages found: $(syft "${FIRST_TAG}" -q | wc -l)"

          # Extract license information
          echo "üìã License Summary:" > license-summary.txt
          syft "${FIRST_TAG}" -o json | jq -r '.artifacts[].licenses[]?.value' | sort | uniq -c | sort -rn >> license-summary.txt || true

          # List packages with non-permissive licenses (basic detection)
          echo -e "\n‚ö†Ô∏è  Packages with potential license concerns:" >> license-summary.txt
          syft "${FIRST_TAG}" -o json | jq -r '.artifacts[] | select(.licenses[]?.value | test("GPL|AGPL|LGPL|CC-BY-SA|SSPL|BUSL"; "i")) | "\(.name) - \(.licenses[].value)"' >> license-summary.txt || true

      # Attach SBOM to the container image as attestation
      - name: Attach SBOM attestation
        uses: actions/attest-sbom@v3
        with:
          subject-name: ${{ inputs.image-name }}
          subject-digest: ${{ inputs.image-digest }}
          sbom-path: sbom-spdx.json
          push-to-registry: true

      # Scan for vulnerabilities
      - name: Scan with Grype
        run: |
          echo "üîç Scanning with Grype..."
          grype sbom:sbom-spdx.json -o table > grype-report.txt || true
          grype sbom:sbom-spdx.json -o json > grype-report.json || true

          # Create summary
          echo "Grype Security Summary:" > security-summary.txt
          echo "Critical: $(grep -c CRITICAL grype-report.txt || echo 0)" >> security-summary.txt
          echo "High: $(grep -c HIGH grype-report.txt || echo 0)" >> security-summary.txt
          echo "Medium: $(grep -c MEDIUM grype-report.txt || echo 0)" >> security-summary.txt
          echo "Low: $(grep -c LOW grype-report.txt || echo 0)" >> security-summary.txt

      - name: Scan with Trivy
        run: |
          echo "üîç Scanning with Trivy..."
          FIRST_TAG=$(echo "${{ inputs.image-tags }}" | head -n1)

          # Comprehensive scan including secrets and misconfigurations
          trivy image --format json --output trivy-report.json "${FIRST_TAG}" || true
          trivy image --format table --output trivy-report.txt "${FIRST_TAG}" || true

          # Secret scanning
          echo -e "\nüîê Secret Scanning Results:" >> security-summary.txt
          trivy image --scanners secret --format table "${FIRST_TAG}" > secret-scan.txt 2>&1 || true
          if grep -q "SECRET" secret-scan.txt; then
            echo "‚ö†Ô∏è  SECRETS DETECTED - Review secret-scan.txt" >> security-summary.txt
          else
            echo "‚úÖ No secrets detected" >> security-summary.txt
          fi

          # License scanning
          echo -e "\nüìú License Scan:" >> security-summary.txt
          trivy image --scanners license --format table "${FIRST_TAG}" > license-scan.txt 2>&1 || true

      # Check for specific security issues
      - name: Security policy checks
        run: |
          echo "üõ°Ô∏è Security Policy Checks" > policy-report.txt

          # Check for root user
          FIRST_TAG=$(echo "${{ inputs.image-tags }}" | head -n1)
          # Pull the image first since it was pushed in the previous job
          docker pull "${FIRST_TAG}" || true

          # Check if docker inspect works
          if docker inspect "${FIRST_TAG}" >/dev/null 2>&1; then
            USER=$(docker inspect "${FIRST_TAG}" | jq -r '.[0].Config.User' || echo "")
            if [ -z "$USER" ] || [ "$USER" = "root" ] || [ "$USER" = "0" ]; then
              echo "‚ö†Ô∏è  WARNING: Container runs as root user" >> policy-report.txt
            else
              echo "‚úÖ Container runs as non-root user: $USER" >> policy-report.txt
            fi

            # Check for sensitive environment variables
            docker inspect "${FIRST_TAG}" | jq -r '.[0].Config.Env[]' 2>/dev/null | while read -r env; do
              if echo "$env" | grep -qE "(PASSWORD|SECRET|TOKEN|KEY|PRIVATE)="; then
                echo "‚ö†Ô∏è  WARNING: Potential sensitive data in ENV: $(echo $env | cut -d= -f1)" >> policy-report.txt
              fi
            done || true

            # Check exposed ports
            PORTS=$(docker inspect "${FIRST_TAG}" | jq -r '.[0].Config.ExposedPorts | keys[]' 2>/dev/null || echo "")
            if [ -n "$PORTS" ]; then
              echo "üì° Exposed ports: $PORTS" >> policy-report.txt
            fi
          else
            echo "‚ö†Ô∏è  WARNING: Unable to inspect container image" >> policy-report.txt
          fi

      # Upload all reports
      - name: Upload security artifacts
        uses: actions/upload-artifact@v5
        with:
          name: security-scan-${{ github.run_id }}
          path: |
            sbom-*.json
            sbom-*.txt
            *-report.*
            *-summary.txt
            *-scan.txt
            license-summary.txt
            policy-report.txt
          retention-days: 90

      # Display summary
      - name: Display security summary
        run: |
          echo "üîí Security Scan Complete"
          echo "================================"
          echo "Image: ${{ inputs.image-tags }}"
          echo "Digest: ${{ inputs.image-digest }}"
          echo "================================"

          echo -e "\nüì¶ SBOM Summary:"
          head -20 sbom-table.txt

          echo -e "\nüîç Vulnerability Summary:"
          cat security-summary.txt

          echo -e "\nüìã License Summary:"
          head -20 license-summary.txt

          echo -e "\nüõ°Ô∏è Policy Compliance:"
          cat policy-report.txt

          # Fail if critical vulnerabilities found (optional)
          CRITICAL_COUNT=$(grep -c CRITICAL grype-report.txt || echo 0)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå CRITICAL vulnerabilities found: $CRITICAL_COUNT"
            echo "Review grype-report.txt and trivy-report.txt for details"
            # Uncomment to fail the build on critical vulnerabilities
            # exit 1
          fi