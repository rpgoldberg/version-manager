name: Scheduled Security Rescan

on:
  schedule:
    # Run daily at 2 AM UTC (adjust for your timezone)
    - cron: '0 2 * * *'
    # Also run weekly for comprehensive scan on Sundays
    - cron: '0 3 * * 0'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      severity_threshold:
        description: 'Minimum severity to report (CRITICAL, HIGH, MEDIUM, LOW)'
        required: false
        default: 'HIGH'
      create_issues:
        description: 'Create GitHub issues for vulnerabilities'
        type: boolean
        default: true

env:
  SEVERITY_THRESHOLD: ${{ github.event.inputs.severity_threshold || 'HIGH' }}
  CREATE_ISSUES: ${{ github.event.inputs.create_issues || 'true' }}

jobs:
  scan-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      issues: write
      security-events: write

    strategy:
      matrix:
        service:
          - name: figure-collector-backend
            tag: latest
          - name: figure-collector-frontend
            tag: latest
          - name: page-scraper
            tag: latest
          - name: version-manager
            tag: latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install scanning tools
        run: |
          # Install Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan image for vulnerabilities
        id: scan
        run: |
          IMAGE="ghcr.io/rpgoldberg/${{ matrix.service.name }}:${{ matrix.service.tag }}"
          echo "Scanning $IMAGE..."

          # Run Trivy scan
          trivy image --format json --output trivy-results.json "$IMAGE" || true
          trivy image --format table --severity "${SEVERITY_THRESHOLD},CRITICAL" "$IMAGE" > scan-summary.txt || true

          # Count vulnerabilities by severity
          CRITICAL_COUNT=$(grep -c "CRITICAL" scan-summary.txt || echo 0)
          HIGH_COUNT=$(grep -c "HIGH" scan-summary.txt || echo 0)
          MEDIUM_COUNT=$(grep -c "MEDIUM" scan-summary.txt || echo 0)

          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "has_vulnerabilities=$([[ $CRITICAL_COUNT -gt 0 || $HIGH_COUNT -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

          # Create markdown summary
          {
            echo "## Vulnerability Scan Results for ${{ matrix.service.name }}"
            echo ""
            echo "- **Critical**: $CRITICAL_COUNT"
            echo "- **High**: $HIGH_COUNT"
            echo "- **Medium**: $MEDIUM_COUNT"
            echo ""
            if [[ $CRITICAL_COUNT -gt 0 || $HIGH_COUNT -gt 0 ]]; then
              echo "### Details:"
              echo '```'
              head -100 scan-summary.txt
              echo '```'
            fi
          } > vulnerability-report.md

      - name: Create or update issue for vulnerabilities
        if: steps.scan.outputs.has_vulnerabilities == 'true' && env.CREATE_ISSUES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const serviceName = '${{ matrix.service.name }}';
            const criticalCount = '${{ steps.scan.outputs.critical_count }}';
            const highCount = '${{ steps.scan.outputs.high_count }}';

            // Read the markdown report
            const report = fs.readFileSync('vulnerability-report.md', 'utf8');

            const title = `ðŸ”’ Security: ${serviceName} - ${criticalCount} critical, ${highCount} high vulnerabilities`;
            const labels = ['security', 'vulnerability', 'automated'];

            // Add priority label based on severity
            if (criticalCount > 0) {
              labels.push('priority:critical');
            } else if (highCount > 0) {
              labels.push('priority:high');
            }

            // Search for existing issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels.join(','),
              state: 'open'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes(serviceName) && issue.title.includes('Security:')
            );

            const body = `
            ${report}

            ---
            **Scan Date**: ${new Date().toISOString()}
            **Image**: ghcr.io/rpgoldberg/${serviceName}:${{ matrix.service.tag }}
            **Threshold**: ${process.env.SEVERITY_THRESHOLD}

            ### Recommended Actions:
            1. Review the vulnerabilities in detail
            2. Update base images if available
            3. Upgrade vulnerable dependencies
            4. Apply security patches

            This issue was automatically created by the scheduled security scan workflow.
            `;

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: title,
                body: body
              });
              console.log(`Updated issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels
              });
              console.log(`Created issue #${newIssue.data.number}`);
            }

      - name: Upload scan results to GitHub Security
        if: steps.scan.outputs.has_vulnerabilities == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: scheduled-scan-${{ matrix.service.name }}
        continue-on-error: true

      - name: Send Discord notification for critical vulnerabilities
        if: steps.scan.outputs.critical_count > 0
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [[ -n "$DISCORD_WEBHOOK" ]]; then
            CRITICAL_COUNT="${{ steps.scan.outputs.critical_count }}"
            HIGH_COUNT="${{ steps.scan.outputs.high_count }}"
            SERVICE="${{ matrix.service.name }}"

            # Create Discord webhook payload
            PAYLOAD=$(cat <<EOF
            {
              "embeds": [{
                "title": "ðŸš¨ Critical Security Alert",
                "description": "Vulnerabilities detected in **${SERVICE}**",
                "color": 15158332,
                "fields": [
                  {
                    "name": "Critical",
                    "value": "${CRITICAL_COUNT}",
                    "inline": true
                  },
                  {
                    "name": "High",
                    "value": "${HIGH_COUNT}",
                    "inline": true
                  },
                  {
                    "name": "Service",
                    "value": "${SERVICE}",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "View details in GitHub Issues"
                },
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }]
            }
            EOF
            )

            curl -X POST "$DISCORD_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD"

            echo "Discord notification sent"
          else
            echo "DISCORD_WEBHOOK not configured, skipping notification"
          fi

  # Aggregate results and create summary
  summary:
    needs: scan-images
    runs-on: ubuntu-latest
    if: always()
    permissions:
      issues: write

    steps:
      - name: Create scan summary
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `ðŸ“Š Security Scan Summary - ${date}`;

            // This would aggregate results from all matrix jobs
            // For now, just log completion
            console.log('Security scan completed for all services');

            // Could create a summary issue or report here